# Coding Dockerfile 
#
# https://github.com/tamboraorg/docker/crecoding
#

# Pull base image.
FROM credocker/creubuntu:2020.0

MAINTAINER Michael Kahle <michael.kahle@yahoo.de>

ARG BUILD_YEAR=2020
ARG BUILD_MONTH=0
ARG BUILD_TAG=latest

# version: yyyy.n for stable versions / 0.yyyy for development

ENV PROCESSOR_MODE CPU   # 'GPU' or 'CPU'
ENV NVIDIA_VERSION 470

ENV JULIA_VERSION 1.6.6
ENV RUST_VERSION 1.57.0
ENV LISP_VERSION 2.0.1
ENV R_VERSION 3.6.3
ENV QUARTO_VERSION 1.1.251

LABEL Name="Coding for CRE" \
      CRE=$CRE_VERSION \ 
      Year=$BUILD_YEAR \
      Month=$BUILD_MONTH \
      Version=$PYTHON_VERSION \
      OS="Ubuntu:$UBUNTU_VERSION" \
      Build_=$BUILD_TAG 

# install GPU driver
# https://www.linuxbabe.com/ubuntu/install-nvidia-driver-ubuntu-18-04
RUN add-apt-repository ppa:graphics-drivers/ppa
RUN apt-get  -y --no-install-recommends install ubuntu-drivers-common
RUN ubuntu-drivers devices
#RUN ubuntu-drivers autoinstall
RUN apt-get  -y --no-install-recommends install nvidia-driver-$NVIDIA_VERSION
#RUN apt-get -y --no-install-recommends install nvidia-$NVIDIA_VERSION

# install OpenBlas
RUN apt-get  -y --no-install-recommends install libopenblas-dev liblapack-dev
#cmake pkg-config 

# install libspatial
RUN apt-get update && apt-get -y --no-install-recommends install libspatialindex-dev && apt-get clean 

# install Python
RUN apt-get update && apt-get -y --no-install-recommends install python3-dev python3-plotly && apt-get clean 
##RUN apt-get update && apt-get -y --no-install-recommends install python3 python3-dev python3-setuptools python3-pip python3-plotly && apt-get clean 
RUN apt-get  -y --no-install-recommends install python3-numpy python3-scipy python3-matplotlib python3-h5py
##RUN pip3 install --upgrade pip 
RUN pip3 install setuptools wheel psutil pipreqs arrow
RUN pip3 install numpy==1.19 scipy rtree==0.9.4 pandas==1.2 geopandas==0.6 patsy statsmodels datatable xlrd==1.2 openpyxl==3.0
RUN pip3 install matplotlib==3.3 seaborn plotly==5.9 kaleido xvfbwrapper
RUN pip3 install Flask connexion beautifulsoup4==4.9
#RUN pip3 install pycurl  #recommended by jupyterlab

# OpenCV
RUN apt-get -y --no-install-recommends  install python3-opencv
RUN pip3 install opencv-python

# install R
# https://packages.ubuntu.com/search?suite=default&section=all&arch=any&keywords=r-cran-c&searchon=names
RUN apt-get -y --no-install-recommends install r-base r-recommended 
RUN apt-get -y --no-install-recommends install r-cran-adegraphics r-cran-amore r-cran-animation r-cran-cli  
RUN apt-get -y --no-install-recommends install r-cran-colorspace r-cran-data.table r-cran-date r-cran-devtools r-cran-foreach 
RUN apt-get -y --no-install-recommends install r-cran-formatr r-cran-formula r-cran-ggplot2 r-cran-gmaps r-cran-gnm 
RUN apt-get -y --no-install-recommends install r-cran-gsl r-cran-highr r-cran-iterators r-cran-its r-cran-jsonlite r-cran-labeling
RUN apt-get -y --no-install-recommends install r-cran-lambda.r r-cran-mapdata r-cran-mapproj r-cran-maps r-cran-maptools  
RUN apt-get -y --no-install-recommends install r-cran-mcmc r-cran-mcmcpack r-cran-mfilter r-cran-ncdf4 r-cran-nlp r-cran-openssl 
RUN apt-get -y --no-install-recommends install r-cran-pheatmap r-cran-plotly r-cran-png r-cran-prettyunits r-cran-raster r-cran-rcolorbrewer 
RUN apt-get -y --no-install-recommends install r-cran-rcpp r-cran-rcurl r-cran-rjson r-cran-rmpi
RUN apt-get -y --no-install-recommends install r-cran-rpostgresql r-cran-rsqlite r-cran-rstudioapi r-cran-scatterplot3d 
RUN apt-get -y --no-install-recommends install r-cran-sp  r-cran-spatial  r-cran-tibble
RUN apt-get -y --no-install-recommends install r-cran-tidyr r-cran-tm r-cran-utf8 r-cran-uuid r-cran-v8
RUN apt-get -y --no-install-recommends install r-cran-vcd r-cran-vcdextra r-cran-vioplot 
RUN apt-get -y --no-install-recommends install r-cran-wikidatar r-cran-wordcloud r-cran-xml r-cran-xml2 r-cran-xtable r-cran-xts 
RUN apt-get -y --no-install-recommends install r-cran-shiny r-cran-shinybs  r-cran-shinydashboard r-cran-shinyjs 

RUN apt-get -y --no-install-recommends install pandoc r-cran-rmarkdown r-cran-markdown r-cran-knitr
# markdown rust-markdown

# Install Quarto
# https://quarto.org
##RUN wget https://github.com/quarto-dev/quarto-cli/releases/download/v$QUARTO_VERSION/quarto-$QUARTO_VERSION-linux-amd64.tar.gz \
## && tar -C /usr/local/bin -xvzf quarto-$QUARTO_VERSION-linux-amd64.tar.gz \
## && mv /usr/local/bin/quarto-$QUARTO_VERSION /usr/local/bin/quarto
## && rm quarto-$QUARTO_VERSION-linux-amd64.tar.gz
RUN wget https://github.com/quarto-dev/quarto-cli/releases/download/v$QUARTO_VERSION/quarto-$QUARTO_VERSION-linux-amd64.deb \
&& dpkg -i quarto-$QUARTO_VERSION-linux-amd64.deb \
&& rm quarto-$QUARTO_VERSION-linux-amd64.deb


## not (yet?) available , 20.04 only 

## https://www.rplumber.io/
## https://www.r-bloggers.com/how-to-create-an-api-for-your-r-code/
#RUN apt-get -y --no-install-recommends install r-cran-plumber

## r-cran-circlize r-cran-clisymbols r-cran-commonmark r-cran-ggsci r-cran-ggthemes r-cran-jpeg r-cran-pdftools r-cran-remotes r-cran-rgdal
## r-cran-rmarkdown r-cran-rstantools r-cran-reticulate r-cran-spacetime r-cran-spatialreg r-cran-svglite r-cran-threejs
## r-cran-tidyverse r-cran-tidygraph r-cran-tidyselect r-cran-tinytex r-cran-tufte r-cran-waveslim r-cran-wavethresh r-cran-webshot r-cran-webutils 
## r-cran-shinycssloaders r-cran-shinythemes
## r-cran-mlr r-cran-mlmetrics r-cran-mlbench
#  "dplyr", "tidytext", "stopwords" 

## rdwd (https://cran.r-project.org/web/packages/rdwd/index.html)
## install.packages("climate")  ; climate ; (https://cran.r-project.org/web/packages/climate/index.html)
# (apt install libcurl4-openssl-dev?) && install.packages(c("devtools", "roxygen2", "testthat", "usethis", "knitr"))

# install rust
RUN apt-get -y --no-install-recommends install rustc cargo
## RUN rustup update # fail

# install cLisp ;-)
# https://packages.ubuntu.com/search?suite=default&section=all&arch=any&keywords=lisp&searchon=names
RUN apt-get -y --no-install-recommends install clisp

#sbcl
RUN apt-get -y --no-install-recommends install sbcl
# http://www.peter-herth.de/ltk/ltkdoc.pdf
# http://www.peter-herth.de/ltk/ltkdoc/node1.html
RUN apt-get -y --no-install-recommends install tcl
#RUN wget https://github.com/herth/ltk/archive/refs/tags/0.992.tar.gz  && \
#    tar -xvzf 0.992.tar.gz  && \ 
#    mv ltk-0.992/ltk /cre/lisp/ltk && \
#    rm -r ltk-0.992 && \ 
#    rm 0.992.tar.gz
RUN wget https://github.com/herth/ltk/archive/refs/tags/0.992.tar.gz  


# roswell ## lisp https://github.com/roswell/roswell
##RUN apt-get -y --no-install-recommends install libcurl3
#RUN apt-get -y --no-install-recommends install libcurl4
#RUN curl --output roswell.deb -sL `curl -s https://api.github.com/repos/roswell/roswell/releases/latest | jq -r '.assets | .[] | select(.name|test("deb$")) | .browser_download_url'`
#RUN dpkg -i roswell.deb


## Julia: >=20.04
RUN apt-get -y --no-install-recommends install julia 
#Pkg.add("Spark.jl")
#https://stackoverflow.com/questions/51272077/install-julia-packages-via-command-line/51273146
##RUN julia -e 'using Pkg; Pkg.add("Spark.jl")'    ##ERROR
## Pkg.add(“IJulia”)

## RUN wget https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.6-linux-x86_64.tar.gz  && \
##     tar -xvzf julia-1.6.6-linux-x86_64.tar.gz  && \
##     cp -r julia-1.6.6 /opt/  && \
##     ln -s /opt/julia-1.6.6/bin/julia /usr/local/bin/julia  && \
##     rm julia-1.6.6-linux-x86_64.tar.gz

# https://medium.com/@andreaskuhn92/how-to-solve-the-same-numerical-problem-in-7-different-programming-languages-a64daac3ed64

RUN mkdir -p /cre && touch /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t creCoding \t $CRE_VERSION" >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t   numpy \t $(python3 -c 'import numpy; print(numpy.__version__)')" >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t   scipy \t $(python3 -c 'import scipy; print(scipy.__version__)')" >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t   pandas \t $(python3 -c 'import pandas; print(pandas.__version__)')" >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t   openCV \t $(python3 -c 'import cv2; print(cv2.__version__)')" >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t  $(R --version | grep 'R version')" >> /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t  sbcl \t $(sbcl --version)" >> /cre/versions.txt && \ 
#   echo "$(date +'%F %R') \t  $(ros --version 2>&1)" >> /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t  $(julia --version)" >> /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t  $(rustc --version)" >> /cre/versions.txt && \ 
   echo "$(date +'%F %R') \t  $(cargo --version)" >> /cre/versions.txt && \ 
#   echo "$(date +'%F %R') \t  $(/usr/local/bin/quarto --version) >> /cre/versions.txt && \
#   echo "$(date +'%F %R') \t  $(/opt/quarto/bin/quarto --version) >> /cre/versions.txt && \
#   echo "$(date +'%F %R') \t  $(quarto --version) >> /cre/versions.txt && \
   echo "$(date +'%F %R') \t  $(latex --version | grep Debian)" >> /cre/versions.txt 

COPY cre /cre

# move full latex to creMedia
# https://yihui.org/tinytex/faq/
# https://yihui.org/tinytex/

RUN wget -qO- "https://yihui.org/tinytex/install-unx.sh" | sh -s - --admin --no-path
RUN ~/.TinyTeX/bin/*/tlmgr path add
# chown -R root:staff ~/.TinyTeX
# chmod -R g+w ~/.TinyTeX
# chmod -R g+wx ~/.TinyTeX/bin 

WORKDIR /cre/code   ##  ??
#WORKDIR /cre

#EXPOSE 8000

ENTRYPOINT ["/cre/coding-entrypoint.sh"]
CMD ["shoreman", "/cre/coding-procfile"]
